use mrqos;
set hive.cli.print.header=true;

select 	*, 
     round(case when sp99d_freq>0 then sp99d_area/n_count/star*100 else 0 end, 2) avg_sp99d,
     round(case when sp95d_freq>0 then sp95d_area/n_count/star*100 else 0 end, 2) avg_sp95d,
     round(case when sp90d_freq>0 then sp90d_area/n_count/star*100 else 0 end, 2) avg_sp90d,
     round(case when sp75d_freq>0 then sp75d_area/n_count/star*100 else 0 end, 2) avg_sp75d,
     round(case when dp99d_freq>0 then dp99d_area/n_count/dtar*100 else 0 end, 2) avg_dp99d,
     round(case when dp95d_freq>0 then dp95d_area/n_count/dtar*100 else 0 end, 2) avg_dp95d,
     round(case when dp90d_freq>0 then dp90d_area/n_count/dtar*100 else 0 end, 2) avg_dp90d,
     round(case when dp75d_freq>0 then dp75d_area/n_count/dtar*100 else 0 end, 2) avg_dp75d,
     round(case when icyd_freq>0 then 100*icyd_area/(n_count*(100-icy_tar)) else 0 end, 2) avg_icyd,
     round(case when ictd_freq>0 then 100*ictd_area/(n_count*(100-ict_tar)) else 0 end, 2) avg_ictd	
from ( 
	select 
	    to_date(from_unixtime((unix_timestamp()-(unix_timestamp()%86400))-14*86400)) STARTDATE, 
	    to_date(from_unixtime(unix_timestamp()-(unix_timestamp()%86400))) ENDDATE,
	    maprule,
	    geoname, 
	    netname, 
	    cast(percentile(sp99, 0.9584) as int) sp99_t95,
	    cast(percentile(sp99, 0.9167) as int) sp99_t90,
	    cast(percentile(sp99, 0.8572) as int) sp99_t85,
	    cast(percentile(sp99, 0.75) as int) sp99_t75,
	    cast(percentile(sp99, 0.5) as int) sp99_t50,
	    cast(percentile(sp95, 0.9584) as int) sp95_t95,
	    cast(percentile(sp95, 0.9167) as int) sp95_t90,
	    cast(percentile(sp95, 0.8572) as int) sp95_t85,
	    cast(percentile(sp95, 0.75) as int) sp95_t75,
	    cast(percentile(sp95, 0.5) as int) sp95_t50,
	    cast(percentile(sp90, 0.9584) as int) sp90_t95,
	    cast(percentile(sp90, 0.9167) as int) sp90_t90,
	    cast(percentile(sp90, 0.8572) as int) sp90_t85,
	    cast(percentile(sp90, 0.75) as int) sp90_t75,
	    cast(percentile(sp90, 0.5) as int) sp90_t50,
	    cast(percentile(sp75, 0.9584) as int) sp75_t95,
	    cast(percentile(sp75, 0.9167) as int) sp75_t90,
	    cast(percentile(sp75, 0.8572) as int) sp75_t85,
	    cast(percentile(sp75, 0.75) as int) sp75_t75,
	    cast(percentile(sp75, 0.5) as int) sp75_t50,
	    min(star) star,
	    sum(sp99d) sp99d_area,
	    sum(sp95d) sp95d_area,
	    sum(sp90d) sp90d_area,
	    sum(sp75d) sp75d_area,
	    max(sp99d) sp99d_max,
	    max(sp95d) sp95d_max,
	    max(sp90d) sp90d_max,
	    max(sp75d) sp75d_max,
	    sum(case when sp99d>0 then 1 else 0 end) sp99d_freq,
	    sum(case when sp95d>0 then 1 else 0 end) sp95d_freq,
	    sum(case when sp90d>0 then 1 else 0 end) sp90d_freq,
	    sum(case when sp75d>0 then 1 else 0 end) sp75d_freq,
	    cast(percentile(dp99, 0.9584) as int) dp99_t95,
	    cast(percentile(dp99, 0.9167) as int) dp99_t90,
	    cast(percentile(dp99, 0.8572) as int) dp99_t85,
	    cast(percentile(dp99, 0.75) as int) dp99_t75,
	    cast(percentile(dp99, 0.5) as int) dp99_t50,
	    cast(percentile(dp95, 0.9584) as int) dp95_t95,
	    cast(percentile(dp95, 0.9167) as int) dp95_t90,
	    cast(percentile(dp95, 0.8572) as int) dp95_t85,
	    cast(percentile(dp95, 0.75) as int) dp95_t75,
	    cast(percentile(dp95, 0.5) as int) dp95_t50,
	    cast(percentile(dp90, 0.9584) as int) dp90_t95,
	    cast(percentile(dp90, 0.9167) as int) dp90_t90,
	    cast(percentile(dp90, 0.8572) as int) dp90_t85,
	    cast(percentile(dp90, 0.75) as int) dp90_t75,
	    cast(percentile(dp90, 0.5) as int) dp90_t50,
	    cast(percentile(dp75, 0.9584) as int) dp75_t95,
	    cast(percentile(dp75, 0.9167) as int) dp75_t90,
	    cast(percentile(dp75, 0.8572) as int) dp75_t85,
	    cast(percentile(dp75, 0.75) as int) dp75_t75,
	    cast(percentile(dp75, 0.5) as int) dp75_t50,
	    min(dtar) dtar,
	    sum(dp99d) dp99d_area,
	    sum(dp95d) dp95d_area,
	    sum(dp90d) dp90d_area,
	    sum(dp75d) dp75d_area,
	    max(dp99d) dp99d_max,
	    max(dp95d) dp95d_max,
	    max(dp90d) dp90d_max,
	    max(dp75d) dp75d_max,
	    sum(case when dp99d>0 then 1 else 0 end) dp99d_freq,
	    sum(case when dp95d>0 then 1 else 0 end) dp95d_freq,
	    sum(case when dp90d>0 then 1 else 0 end) dp90d_freq,
	    sum(case when dp75d>0 then 1 else 0 end) dp75d_freq,
	    cast(percentile(icy_pct, 0.0416) as int) icy_t95,
	    cast(percentile(icy_pct, 0.0832) as int) icy_t90,
	    cast(percentile(icy_pct, 0.1428) as int) icy_t85,
	    cast(percentile(icy_pct, 0.25) as int) icy_t75,
	    cast(percentile(icy_pct, 0.5) as int) icy_t50,
	    min(icy_tar) icy_tar,
	    sum(icyd) icyd_area,
	    max(icyd) icyd_max,
	    sum(case when icyd>0 then 1 else 0 end) icyd_freq,
	    cast(percentile(ict_pct, 0.0416) as int) ict_t95,
	    cast(percentile(ict_pct, 0.0832) as int) ict_t90,
	    cast(percentile(ict_pct, 0.1428) as int) ict_t85,
	    cast(percentile(ict_pct, 0.25) as int) ict_t75,
	    cast(percentile(ict_pct, 0.5) as int) ict_t50,
	    min(ict_tar) ict_tar,
	    sum(ictd) ictd_area,
	    max(ictd) ictd_max,
	    sum(case when ictd>0 then 1 else 0 end) ictd_freq,
	    round(sum(total_bps/1024/1024),2 ) total_mbps,
	    round(sum(ping_bps/1024/1024), 2) ping_mbps,
	    min(p2t_bps_pct) p2t_bps_pct_min,
	    count(*) n_count
	from mrqos_join 
	where cast(ts as bigint) > (unix_timestamp()-(unix_timestamp()%86400))-14*86400
	      and cast(ts as bigint) < (unix_timestamp()-(unix_timestamp()%86400))
	group by
	geoname, maprule, netname
    ) a
